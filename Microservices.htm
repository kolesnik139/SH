<b>Плюсы микросервисов:</b><br>
<b>1. Гибкая масштабируемость:</b> Микросервисы могут масштабироваться независимо друг от друга.<br>
<b>2. Отказоустойчивость:</b> Если один микросервис падает, это не означает, что всё приложение упадёт.<br>
<b>3. Разные технологии:</b> Могут быть написаны на разных языках программирования.<br>
<b>4. Разработка и тестирование по отдельности: </b> Каждый сервис можно разрабатывать и тестировать независимо.<br>
<b>5. Внедрение по отдельности:</b> Новые функции и исправления могут быть быстро внедрены по отдельности.<br>
<b>6. Single Responsibility:</b> На уровне сервиса.<br>
<br>
<b>Минусы микросервисов:</b><br>
<b>Сложность управления и развёртывания:</b> Настройка, мониторинг, логирование, обслуживание и версионирование множества микросервисов может быть сложной задачей.<br>
<b>Сложность транзакций:</b> Осуществление транзакций между микросервисами сложнo<br>
<b>Сетевые затраты:</b> Cетевые задержки и проблемы с производительностью.<br>
<b>Проблемы безопасности:</b> Больше точек входа может означать больше потенциальных угроз безопасности.<br>
<b>Дублирование кода:</b> Некоторые функции могут повторяться в разных микросервисах.<br>
<br>
<b>Шаблоны микросервисов:</b><br>
<b>1. API Gateway:</b> Сервис - единая точка входа внешнего API, Делает аутентификацию. Кеширует, агрегирует и делегирует запросы к соответствующим микросервисам.<br>
<b>2. Service Discovery:</b> Предоставляет центральное хранилище для поиска микросервисов по имени.<br>
<b>3. Circuit Breaker:</b> Отслеживает состояние сервиса и, если он упал, перестаёт отправлять запросы до тех пор, пока сервис не восстановится.<br>
<b>4. Sidecar:</b>Позволяет расширить и улучшить один микросервис без модификации его кода путем добавления дополнительного контейнера в тот же pod.<br>
<b>5. Saga:</b>Для управления транзакциями.<br>
Локальные транзакции в каждом сервисе выполняются, и выдают событие для следующего сервиса, чтобы начать транзакцию. Если какая-либо из транзакций терпит неудачу, выполняются транзакции, отменяющие предыдущую транзакцию.<br>
<b>6. Event Sourcing:</b> Хранение ИЗМЕНЕНИЙ в состоянии приложения как последовательность событий.<br>
<b>7. CQRS (Command Query Responsibility Segregation):</b> Разделение модели чтения данных от модели записи для улучшения производительности и масштабируемости.<br>
<b>8. Backends for Frontends (BFF):</b> Отдельный сервис для каждого интерфейса пользовательского приложения или "фронтенда"<br>

